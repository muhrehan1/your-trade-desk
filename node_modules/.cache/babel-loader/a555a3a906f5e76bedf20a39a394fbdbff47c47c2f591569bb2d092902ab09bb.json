{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\your-trade-desk\\\\src\\\\components\\\\UserLists.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserLists() {\n  _s();\n  const [userData, setUserData] = useState([]);\n  const axios = require('axios');\n  const sendDataToLaravel = () => {\n    const requestData = {\n      key: {\n        'id': 'test',\n        'name': 'Rehan'\n      }\n    };\n    console.log('Request Data:', requestData); // Request data ko console par show karta hai\n\n    axios.post('http://127.0.0.1:8000/api/send-data', JSON.stringify(requestData), {\n      headers: {\n        'Content-Type': 'application/json'\n        // Laravel backend ke liye CSRF token bhi yahan include kiya ja sakta hai agar required hai\n        // 'X-CSRF-TOKEN': csrfToken,\n      }\n    }).then(response => {\n      // Laravel se aane wale response ko handle karta hai\n      console.log('Response from Laravel:', response.data);\n    }).catch(error => {\n      // Request ke doran jo errors aati hain unko handle karta hai\n      console.error('Error:', error);\n    });\n  };\n\n  // sendDataToLaravel function ko call karte hain\n  sendDataToLaravel();\n  useEffect(() => {\n    // Fetch data from the API when the component mounts\n    fetch('http://127.0.0.1:8000/api/resource').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      setUserData(data);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, []); // Empty dependency array ensures the effect runs once after the initial render\n\n  // Define the function to send data to Laravel\n\n  // Call sendDataToLaravel when userData changes (i.e., after data is fetched from /api/resource)\n  useEffect(() => {\n    sendDataToLaravel();\n  }, [userData]); // Call this effect whenever userData changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: userData && userData.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Name: \", user.name, \"Email: \", user.email]\n      }, user.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n_s(UserLists, \"8vsPbv7NZKmS6rljhTYlnIdl1Ls=\");\n_c = UserLists;\nexport default UserLists;\nvar _c;\n$RefreshReg$(_c, \"UserLists\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","UserLists","_s","userData","setUserData","require","sendDataToLaravel","requestData","key","console","log","post","JSON","stringify","headers","then","response","data","catch","error","fetch","ok","Error","json","children","fileName","_jsxFileName","lineNumber","columnNumber","map","user","name","email","id","_c","$RefreshReg$"],"sources":["C:/wamp64/www/your-trade-desk/src/components/UserLists.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nfunction UserLists() {\r\n    const [userData, setUserData] = useState([]);\r\n\r\n    const axios = require('axios');\r\n\r\n    const sendDataToLaravel = () => {\r\n        const requestData = {\r\n            key: {\r\n                'id': 'test',\r\n                'name': 'Rehan'\r\n            },\r\n        };\r\n\r\n        console.log('Request Data:', requestData); // Request data ko console par show karta hai\r\n\r\n        axios.post('http://127.0.0.1:8000/api/send-data', JSON.stringify(requestData), {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                // Laravel backend ke liye CSRF token bhi yahan include kiya ja sakta hai agar required hai\r\n                // 'X-CSRF-TOKEN': csrfToken,\r\n            },\r\n        })\r\n            .then(response => {\r\n                // Laravel se aane wale response ko handle karta hai\r\n                console.log('Response from Laravel:', response.data);\r\n            })\r\n            .catch(error => {\r\n                // Request ke doran jo errors aati hain unko handle karta hai\r\n                console.error('Error:', error);\r\n            });\r\n    };\r\n\r\n// sendDataToLaravel function ko call karte hain\r\n    sendDataToLaravel();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        // Fetch data from the API when the component mounts\r\n        fetch('http://127.0.0.1:8000/api/resource')\r\n            .then((response) => {\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then((data) => {\r\n                setUserData(data);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching data:', error);\r\n            });\r\n    }, []); // Empty dependency array ensures the effect runs once after the initial render\r\n\r\n    // Define the function to send data to Laravel\r\n\r\n\r\n    // Call sendDataToLaravel when userData changes (i.e., after data is fetched from /api/resource)\r\n    useEffect(() => {\r\n\r\n        sendDataToLaravel();\r\n    }, [userData]); // Call this effect whenever userData changes\r\n\r\n    return (\r\n\r\n        <div>\r\n            <h1>User List</h1>\r\n            <ul>\r\n                {userData && userData.map((user) => (\r\n                    <li key={user.id}>\r\n                        Name: {user.name}\r\n                        Email: {user.email}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserLists;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAME,KAAK,GAAGO,OAAO,CAAC,OAAO,CAAC;EAE9B,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,MAAMC,WAAW,GAAG;MAChBC,GAAG,EAAE;QACD,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE;MACZ;IACJ,CAAC;IAEDC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,WAAW,CAAC,CAAC,CAAC;;IAE3CT,KAAK,CAACa,IAAI,CAAC,qCAAqC,EAAEC,IAAI,CAACC,SAAS,CAACN,WAAW,CAAC,EAAE;MAC3EO,OAAO,EAAE;QACL,cAAc,EAAE;QAChB;QACA;MACJ;IACJ,CAAC,CAAC,CACGC,IAAI,CAACC,QAAQ,IAAI;MACd;MACAP,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEM,QAAQ,CAACC,IAAI,CAAC;IACxD,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZ;MACAV,OAAO,CAACU,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC,CAAC,CAAC;EACV,CAAC;;EAEL;EACIb,iBAAiB,CAAC,CAAC;EAInBT,SAAS,CAAC,MAAM;IACZ;IACAuB,KAAK,CAAC,oCAAoC,CAAC,CACtCL,IAAI,CAAEC,QAAQ,IAAK;MAChB,IAAI,CAACA,QAAQ,CAACK,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAClD;MACA,OAAON,QAAQ,CAACO,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDR,IAAI,CAAEE,IAAI,IAAK;MACZb,WAAW,CAACa,IAAI,CAAC;IACrB,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MACdV,OAAO,CAACU,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;;EAGA;EACAtB,SAAS,CAAC,MAAM;IAEZS,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,oBAEIH,OAAA;IAAAwB,QAAA,gBACIxB,OAAA;MAAAwB,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClB5B,OAAA;MAAAwB,QAAA,EACKrB,QAAQ,IAAIA,QAAQ,CAAC0B,GAAG,CAAEC,IAAI,iBAC3B9B,OAAA;QAAAwB,QAAA,GAAkB,QACR,EAACM,IAAI,CAACC,IAAI,EAAC,SACV,EAACD,IAAI,CAACE,KAAK;MAAA,GAFbF,IAAI,CAACG,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGZ,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd;AAAC1B,EAAA,CA7EQD,SAAS;AAAAiC,EAAA,GAATjC,SAAS;AA+ElB,eAAeA,SAAS;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}